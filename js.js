// Generated by CoffeeScript 1.7.1
(function() {
  Function.prototype.debounce = function(threshold, execAsap) {
    var debounced, func, timeout;
    func = this;
    timeout = void 0;
    return debounced = function() {
      var args, delayed, obj;
      delayed = function() {
        if (!execAsap) {
          func.apply(obj, args);
        }
        timeout = null;
      };
      obj = this;
      args = arguments;
      if (timeout) {
        clearTimeout(timeout);
      } else {
        if (execAsap) {
          func.apply(obj, args);
        }
      }
      timeout = setTimeout(delayed, threshold || 100);
    };
  };

  $(function() {
    var clearFilter, clearLandmarks, drawLandmarks, filterLandmarksByType, getLandmarks, landmarkTypes, landmarks, location, map, mapOptions, markerImages, setMarkers, types;
    landmarkTypes = $('.landmarks .landmark_link');
    clearFilter = $('.landmarks .landmark_link.clear-filter');
    map = void 0;
    landmarks = [];
    types = [];
    location = $('#landmarks_map').data('location');
    mapOptions = {
      zoom: 8,
      center: new google.maps.LatLng(location[0], location[1])
    };
    map = new google.maps.Map(document.getElementById('landmarks_map'), mapOptions);
    markerImages = {
      'statue': '/img/marker_statue.png',
      'cathedral': '/img/marker_cathedral.png',
      'palace': '/img/marker_palace.png',
      'fountain': '/img/marker_fountain.png'
    };
    setMarkers = function() {
      var image, landmark, marker, myLatLng, _i, _len;
      for (_i = 0, _len = landmarks.length; _i < _len; _i++) {
        landmark = landmarks[_i];
        image = {
          url: markerImages[landmark.type],
          size: new google.maps.Size(32, 37),
          anchor: new google.maps.Point(0, 32)
        };
        myLatLng = new google.maps.LatLng(landmark.lat, landmark.lng);
        marker = new google.maps.Marker({
          position: myLatLng,
          map: null,
          icon: image,
          flat: true,
          title: landmark.title
        });
        landmark.marker = marker;
      }
      return true;
    };
    drawLandmarks = function(filerredLandmarks) {
      var landmark, _i, _len;
      for (_i = 0, _len = filerredLandmarks.length; _i < _len; _i++) {
        landmark = filerredLandmarks[_i];
        landmark.marker.setMap(map);
      }
      return true;
    };
    getLandmarks = function() {
      var bounds, request;
      bounds = map.getBounds().toUrlValue();
      request = $.ajax({
        url: '/landmarks.json',
        type: 'GET',
        data: {
          bounds: bounds
        },
        contentType: 'json'
      });
      clearLandmarks(true);
      request.then(function(data) {
        landmarks = JSON.parse(data);
        setMarkers();
        return drawLandmarks(filterLandmarksByType());
      }, function(error) {
        return console.warn('data error');
      });
      return true;
    };
    clearLandmarks = function(clear) {
      var landmark, _i, _len;
      if (clear == null) {
        clear = false;
      }
      for (_i = 0, _len = landmarks.length; _i < _len; _i++) {
        landmark = landmarks[_i];
        landmark.marker.setMap(null);
        if (clear) {
          delete landmark.marker;
        }
      }
      return true;
    };
    filterLandmarksByType = function() {
      if (types.length > 0) {
        return $.grep(landmarks, function(landmark, index) {
          return types.indexOf(landmark.type) !== -1;
        });
      } else {
        return landmarks;
      }
    };
    landmarkTypes.click(function(e) {
      var element, elementType;
      e.preventDefault();
      element = $(this);
      elementType = element.data('type');
      if (element.hasClass('clear-filter')) {
        types = [];
        landmarkTypes.removeClass('active');
        element.addClass('active');
      } else {
        clearFilter.removeClass('active');
        if (element.hasClass('active')) {
          element.removeClass('active');
          types.splice(types.indexOf(elementType), 1);
          if (types.length === 0) {
            clearFilter.addClass('active');
          }
        } else {
          types.push(elementType);
          element.addClass('active');
        }
      }
      clearLandmarks();
      drawLandmarks(filterLandmarksByType());
      return false;
    });
    google.maps.event.addListener(map, 'bounds_changed', (function() {
      getLandmarks();
    }).debounce(100));
  });

}).call(this);
