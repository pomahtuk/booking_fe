// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($, window, document) {
    var Carusel, defaults, pluginName;
    pluginName = "pcarusel";
    defaults = {
      animSpeed: 500,
      animInterval: 5000,
      showTitles: true,
      autoplay: true,
      prevClass: 'carusel-prev',
      nextClass: 'carusel-next'
    };
    Carusel = (function() {
      function Carusel(element, options) {
        this.setIndex = __bind(this.setIndex, this);
        this.slideIndex = 0;
        this.animProgress = true;
        this.element = $(element);
        this.settings = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        window.carusel = this;
        this.init();
      }

      Carusel.prototype.init = function() {
        var carusel, caruselWidth, template;
        carusel = this;
        template = $("<div class=\"viewport\">\n  <a class=\"" + carusel.settings.prevClass + "\" href=\"#\"></a>\n  <a class=\"play-pause pause\" href=\"#\"></a>\n  <div class=\"wrapper\"></div>\n  <div class=\"slide-title\"></div>\n  <a class=\"" + carusel.settings.nextClass + "\" href=\"#\"></a>\n</div>");
        carusel.element.prepend(template);
        carusel.container = template.find('.wrapper');
        carusel.title = template.find('.slide-title');
        carusel.slidesThumbs = carusel.element.find('.one_photo > a');
        carusel.playPause = template.find('.play-pause');
        carusel.slideWidth = template.width();
        carusel.prev = template.find("." + carusel.settings.prevClass);
        carusel.next = template.find("." + carusel.settings.nextClass);
        carusel.slidesThumbs.click(function(e) {
          var slide;
          e.preventDefault();
          slide = $(this);
          return carusel.setIndex(slide.parent('.one_photo').index());
        });
        caruselWidth = 0;
        carusel.slidesThumbs.each(function(index, slide) {
          var img, link, timeoutImg, title;
          slide = $(slide);
          slide.attr('data-index', index);
          link = slide.attr('href');
          title = slide.find('img').attr('alt');
          img = $("<img class='carusel-slide' src='" + link + "' alt='" + title + "' data-index='" + index + "'/>");
          carusel.container.append(img);
          if (index === 0) {
            carusel.title.text(title);
            slide.addClass('active');
            timeoutImg = new Image;
            timeoutImg.src = link;
            return timeoutImg.onload = function() {
              carusel.container.width(timeoutImg.width * (carusel.slidesThumbs.length + 1));
              return carusel.animProgress = false;
            };
          }
        });
        carusel.setInterval();
        carusel.playPause.click(function(e) {
          var button;
          e.preventDefault();
          button = $(this);
          if (button.hasClass('pause')) {
            clearInterval(carusel.interval);
            button.removeClass('pause');
            return button.addClass('play');
          } else if (button.hasClass('play')) {
            button.addClass('pause');
            button.removeClass('play');
            return carusel.setInterval();
          }
        });
        carusel.slides = carusel.container.find('.carusel-slide');
        carusel.prev.click(function(e) {
          var newIndex;
          e.preventDefault();
          newIndex = carusel.slideIndex - 1;
          return carusel.setIndex(newIndex);
        });
        carusel.next.click(function(e) {
          var newIndex;
          e.preventDefault();
          newIndex = carusel.slideIndex + 1;
          return carusel.setIndex(newIndex);
        });
      };

      Carusel.prototype.setInterval = function() {
        this.interval = setInterval((function(_this) {
          return function() {
            var newIndex;
            newIndex = _this.slideIndex + 1;
            return _this.setIndex(newIndex);
          };
        })(this), this.settings.animInterval);
      };

      Carusel.prototype.setIndex = function(index) {
        var animCallback, currentPreview, currentSlide, newIndex, targetPreview, targetSlide, tempTargetSlide;
        if (this.animProgress || index === this.slideIndex) {
          return;
        }
        this.animProgress = true;
        if (index >= 0 && index <= this.slides.length - 1) {
          newIndex = index;
        } else if (index < 0) {
          newIndex = this.slides.length - 1;
        } else {
          newIndex = 0;
        }
        currentSlide = this.slides.filter("*[data-index=" + this.slideIndex + "]");
        targetSlide = this.slides.filter("*[data-index=" + newIndex + "]");
        tempTargetSlide = targetSlide.clone();
        currentPreview = this.slidesThumbs.filter("*[data-index=" + this.slideIndex + "]");
        targetPreview = this.slidesThumbs.filter("*[data-index=" + newIndex + "]");
        this.slidesThumbs.removeClass('active');
        targetPreview.addClass('active');
        animCallback = (function(_this) {
          return function() {
            tempTargetSlide.remove();
            _this.container.css({
              left: "-" + (_this.slideWidth * newIndex) + "px"
            });
            _this.slideIndex = newIndex;
            _this.title.text($(_this.slides[_this.slideIndex]).attr('alt'));
            return _this.animProgress = false;
          };
        })(this);
        if (newIndex > this.slideIndex) {
          tempTargetSlide.insertAfter(currentSlide);
          this.container.animate({
            left: "-=" + this.slideWidth
          }, this.settings.animSpeed, animCallback);
        } else {
          tempTargetSlide.insertBefore(currentSlide);
          this.container.css({
            left: "-" + (this.slideWidth * (this.slideIndex + 1)) + "px"
          });
          this.container.animate({
            left: "+=" + this.slideWidth
          }, this.settings.animSpeed, animCallback);
        }
        return true;
      };

      return Carusel;

    })();
    $.fn[pluginName] = function(options) {
      this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          $.data(this, "plugin_" + pluginName, new Carusel(this, options));
        }
      });
      return this;
    };
  })(jQuery, window, document);

}).call(this);
